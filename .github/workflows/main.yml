name: ci

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
    branches:
      - 'master'

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      -
        name: build and push tmp images
        run: |
          set -e

          echo ${GITHUB_REF}
          TMP_IMAGE="${{ secrets.DOCKER_USER }}/alpine:${{ github.sha }}-${{ github.run_id }}"
          echo ${TMP_IMAGE}

          archs=(amd64 arm arm64 ppc64le s390x)
          cd alpine
          for a in ${archs[@]}; do
            IMAGE=${TMP_IMAGE} ARCH=${a} make container
          done

          IMAGE=${TMP_IMAGE} make push-manifest

      - name: test
        run: |
          set -xe

          TMP_IMAGE="${{ secrets.DOCKER_USER }}/alpine:${{ github.sha }}-${{ github.run_id }}"
          echo ${TMP_IMAGE}

          archs=(amd64 arm arm64 ppc64le s390x)
          for a in ${archs[@]}; do
            IMAGE="${TMP_IMAGE}-linux-${a}"
            echo ${IMAGE}
            docker manifest inspect -v "${IMAGE}" | jq '.Descriptor.platform'
          done

          docker manifest inspect ${TMP_IMAGE} | jq '.manifests[].platform'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USER }}/alpine:${{ github.sha }}-${{ github.run_id }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

      - name: build and push stable image
        run: |
          set -e

          IMAGE="${{ secrets.DOCKER_USER }}/alpine:3.13"
          echo ${IMAGE}

          archs=(amd64 arm arm64 ppc64le s390x)
          cd alpine
          for a in ${archs[@]}; do
            IMAGE=${IMAGE} ARCH=${a} make container
          done

          IMAGE=${IMAGE} make push-manifest

          docker manifest inspect ${IMAGE}| jq '.manifests[].platform'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USER }}/alpine:3.13'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
