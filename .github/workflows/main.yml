name: ci

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
    branches:
      - 'master'

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      -
        name: build and push tmp images
        run: |
          set -e

          dirs=(alpine debian)
          for name in ${dirs[@]}; do
            echo ${GITHUB_REF}
            TMP_IMAGE="${{ secrets.DOCKER_USER }}/${name}:${{ github.sha }}-${{ github.run_id }}"
            echo ${TMP_IMAGE}
            (
              IMAGE=${TMP_IMAGE} DIR=${name} make build-arch-image
              IMAGE=${TMP_IMAGE} DIR=${name} make push-manifest
             )
          done

      - name: test
        run: |
          set -xe

          dirs=(alpine debian)
          for name in ${dirs[@]}; do
            TMP_IMAGE="${{ secrets.DOCKER_USER }}/${name}:${{ github.sha }}-${{ github.run_id }}"
            echo ${TMP_IMAGE}

            IMAGE=${TMP_IMAGE} make test-arch-image

            docker manifest inspect ${TMP_IMAGE} | jq '.manifests[].platform'
          done

      - name: Run Trivy vulnerability scanner (alpine)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USER }}/alpine:${{ github.sha }}-${{ github.run_id }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

      - name: Run Trivy vulnerability scanner (debian)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USER }}/debian:${{ github.sha }}-${{ github.run_id }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

      - name: build and push stable image
        run: |
          set -e

          dirs=(alpine debian)
          for name in ${dirs[@]}; do
            if [ $(name) == 'alpine' ]; then
              IMAGE="${{ secrets.DOCKER_USER }}/${name}:3.13"
            else
              IMAGE="${{ secrets.DOCKER_USER }}/${name}:10"
            fi
            echo ${IMAGE}

            (
              IMAGE=${IMAGE} DIR=${name} make build-arch-image
              IMAGE=${IMAGE} DIR=${name} make push-manifest
             )
            IMAGE=${IMAGE} make test-arch-image

            docker manifest inspect ${IMAGE}| jq '.manifests[].platform'
          done

      - name: Run Trivy vulnerability scanner (alpine)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USER }}/alpine:3.13'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

      - name: Run Trivy vulnerability scanner (debian)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USER }}/debian:10'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
