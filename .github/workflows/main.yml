name: ci

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
    branches:
      - 'master'

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      -
        name: build and push tmp images
        run: |
          set -e

          echo ${GITHUB_REF}

          TMP_TAG="$(echo ${GITHUB_SHA} | cut -c1-12)-${GITHUB_RUN_ID}"
          TMP_IMAGE="${{ secrets.DOCKER_USER }}/alpine:${TMP_TAG}"
          echo ${TMP_IMAGE}

          cd alpine && IMAGE=${TMP_IMAGE} \
            PLATFORM="linux/amd64,linux/arm64,linux/arm/v7" \
            BUILDX_OPTS='--no-cache --pull' \
            make buildx

      - name: test
        run: |
          set -e

          # sudo apt-get update
          # sudo apt-get install jq

          TMP_TAG="$(echo ${GITHUB_SHA} | cut -c1-12)-${GITHUB_RUN_ID}"
          TMP_IMAGE="${{ secrets.DOCKER_USER }}/alpine:${TMP_TAG}"
          echo ${TMP_IMAGE}

          docker manifest inspect ${TMP_IMAGE} | jq '.manifests[].platform'

      - name: build and push stable image
        run: |
          set -e

          IMAGE="${{ secrets.DOCKER_USER }}/alpine:3.13"
          echo ${IMAGE}

          cd alpine && IMAGE=${IMAGE} \
            PLATFORM="linux/amd64,linux/arm64,linux/arm/v7" \
            BUILDX_OPTS='' \
            make buildx

          docker manifest inspect ${IMAGE}| jq '.manifests[].platform'
